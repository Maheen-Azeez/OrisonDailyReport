@page "/UserwiseCollectionSummary"

@using System.Data
@using OrisonDailyReport.Client.Services
@using OrisonDailyReport.Shared.Entities.BoldReport
@using OrisonDailyReport.Shared.Entities.General
@using OrisonDailyReport.Shared.Entities.Login
@using OrisonDailyReport.Shared.Entities.Registers

@using Syncfusion.Blazor.Buttons;
@using Syncfusion.Blazor.Grids;
@using Syncfusion.Blazor.DropDowns;
@using Syncfusion.Blazor.Calendars;
@using Syncfusion.Blazor.Spinner;
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.Inputs
@using System.Threading.Tasks
@using System.Dynamic;
@using Newtonsoft.Json;
@using System.Web
@inject NavigationManager _NavManager
@inject Blazored.SessionStorage.ISessionStorageService localStorage
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject OrisonDailyReport.Client.Logics.Contract.BoldReport.IBoldReportManager _BoldReport
@inject OrisonDailyReport.Client.Logics.Contract.General.IUserLoginManager _userLoginManager
@inject OrisonDailyReport.Client.Logics.Contract.General.ICompanyManager _companyManager
@inject OrisonDailyReport.Client.Logics.Contract.Registers.IAccountsMain _accountsmain
@inject OrisonDailyReport.Client.Services.GeneralServices _generalService
@inject NavigationManager NavigationManager
@inject IJSRuntime jsRuntime
@inject ToastService ToastService
@inject HttpClient http
@inject GlobalService _GlobalServ
@using Microsoft.Extensions.Localization
@using OrisonDailyReport.Client.Resources
@inject IStringLocalizer<SfResources> Localizer
<head>
    <link href="css/OrisonSyncfusionStyles.css" rel="stylesheet" />
</head>

<div>

    <div class="box-card-shadow">
        <div class="row">
            <div class="col-md-12 mt-2">
                <SfButton IconCss="Icon excel" CssClass="e-btn4" @onclick="@ExportExcel"></SfButton>
                <SfButton IconCss="Icon pdf" CssClass="e-btn4" @onclick="@ExportPdf"></SfButton>
                <SfComboBox @bind-Value="@Description" TValue="string" TItem="String" DataSource="@DropdownData" Width="140px"></SfComboBox>
                <SfDatePicker @bind-Value="@SDate" Format="dd/MM/yyyy" title=@Localizer["From Date"] Width="150px" Placeholder=@Localizer["From Date"]></SfDatePicker>
                <SfDatePicker @bind-Value="@EDate" Format="dd/MM/yyyy" title=@Localizer["To Date"] Width="150px" Placeholder=@Localizer["To Date"]></SfDatePicker>
                <SfComboBox Width="180px" @bind-Value="@cmbUsername" DataSource="@UserList" AllowFiltering="true" Placeholder=@Localizer["User Name"] ShowClearButton="true">
                    <ComboBoxFieldSettings Value="UserName"></ComboBoxFieldSettings>
                </SfComboBox>
                <SfButton IconCss="Icon search" @onclick="@Search_Click" title=@Localizer["Search"] CssClass="e-btn4"></SfButton>
                <SfButton IconCss="Icon preprint" CssClass="e-btn4" @onclick="@DownLoadDocument"></SfButton>
            </div>

        </div>
    </div>

    <div>
        <div class="box-card-shadow">
            <SfGrid ID="SGrid" DataSource="@gridData"
                    GridLines="GridLine.Both"
                    AllowSorting="true"
                    AllowFiltering="true"
                    AllowExcelExport="true"
                    AllowPdfExport="true"
                    AllowPaging="true"
                    AllowResizing="true"
                    RowHeight="24"
                    Height="@GridHeight"
                    Width="100%"
                    @ref="SGrid">
                <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel" ShowFilterBarStatus="true"></GridFilterSettings>
                <GridPageSettings PageSize="100"></GridPageSettings>

                <GridAggregates>
                    <GridAggregate>
                        <GridAggregateColumns>
                            <GridAggregateColumn Format="@DecimalFormat" Field=@nameof(dtAccountsMain.Cash) Type="AggregateType.Sum">
                                <FooterTemplate>
                                    @{
                                        var aggregate = (context as AggregateTemplateContext);
                                        <div style="padding-top:5px;">
                                            <div style="align-items:end;">@aggregate.Sum</div>
                                        </div>

                                    }
                                </FooterTemplate>
                            </GridAggregateColumn>


                            <GridAggregateColumn Format="@DecimalFormat" Field=@nameof(dtAccountsMain.Cheque) Type="AggregateType.Sum">
                                <FooterTemplate>
                                    @{
                                        var aggregate = (context as AggregateTemplateContext);
                                        <div>
                                            <div style="align-items:end;">@aggregate.Sum</div>

                                        </div>

                                    }
                                </FooterTemplate>
                            </GridAggregateColumn>
                            <GridAggregateColumn Format="@DecimalFormat" Field=@nameof(dtAccountsMain.TT) Type="AggregateType.Sum">
                                <FooterTemplate>
                                    @{
                                        var aggregate = (context as AggregateTemplateContext);
                                        <div>

                                            <div style="align-items:end;">@aggregate.Sum</div>

                                        </div>
                                    }
                                </FooterTemplate>
                            </GridAggregateColumn>
                            <GridAggregateColumn Format="@DecimalFormat" Field=@nameof(dtAccountsMain.Card) Type="AggregateType.Sum">
                                <FooterTemplate>
                                    @{
                                        var aggregate = (context as AggregateTemplateContext);
                                        <div>

                                            <div style="align-items:end;">@aggregate.Sum</div>

                                        </div>
                                    }
                                </FooterTemplate>
                            </GridAggregateColumn>
                            <GridAggregateColumn Format="@DecimalFormat" Field=@nameof(dtAccountsMain.OnlinePayment) Type="AggregateType.Sum">
                                <FooterTemplate>
                                    @{
                                        var aggregate = (context as AggregateTemplateContext);
                                        <div>

                                            <div style="align-items:end;">@aggregate.Sum</div>

                                        </div>
                                    }
                                </FooterTemplate>
                            </GridAggregateColumn>
                            <GridAggregateColumn Format="@DecimalFormat" Field=@nameof(dtAccountsMain.Total) Type="AggregateType.Sum">
                                <FooterTemplate>
                                    @{
                                        var aggregate = (context as AggregateTemplateContext);
                                        <div>

                                            <div style="align-items:end;">@aggregate.Sum</div>

                                        </div>
                                    }
                                </FooterTemplate>
                            </GridAggregateColumn>

                        </GridAggregateColumns>
                    </GridAggregate>
                </GridAggregates>
                <GridColumns>
                    <GridColumn Field=@nameof(dtAccountsMain.UserName) HeaderText=@Localizer["Username"] TextAlign="TextAlign.Left" Width="150"></GridColumn>
                    <GridColumn Field=@nameof(dtAccountsMain.Cash) HeaderText=@Localizer["Cash"] HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Right" Width="80" Format="@DecimalFormat"></GridColumn>
                    <GridColumn Field=@nameof(dtAccountsMain.Cheque) HeaderText=@Localizer["Cheque"] HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Right" Width="80" Format="@DecimalFormat"></GridColumn>
                    <GridColumn Field=@nameof(dtAccountsMain.TT) HeaderText=@Localizer["TT"] HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Right" Width="80" Format="@DecimalFormat"></GridColumn>
                    <GridColumn Field=@nameof(dtAccountsMain.Card) HeaderText=@Localizer["Card"] HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Right" Width="80" Format="@DecimalFormat"></GridColumn>
                    <GridColumn Field=@nameof(dtAccountsMain.OnlinePayment) HeaderText=@Localizer["Online Payment"] HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Right" Width="150" Format="@DecimalFormat"></GridColumn>
                    <GridColumn Field=@nameof(dtAccountsMain.Total) HeaderText=@Localizer["Total"] HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Right" Width="80" Format="@DecimalFormat"></GridColumn>
                </GridColumns>
                @if (Loading)
                {
                    @* <div style="padding-top:700px;"> *@
                    @* <div class="loader"></div> *@
                    <svg width="2500" height="2500" viewBox="126.444 2.281 589 589"><image href="gif/loading-waiting.gif" height="590px" width="770px" /></svg>
                    @* </div> *@
                }
@*                 <SfSpinner Visible="@Loading"></SfSpinner>
 *@            </SfGrid>
            <div class="row">
                <div class="col-md-12 d-flex justify-content-between">
                    <label class="language-footer-label">@Localizer["GRAND TOTAL COLLECTION"]</label>
                    <label class="language-footer-value">@GrandTotal</label>
                </div>
            </div>
        </div>
    </div>
</div>


@code {

    DateTime SDate, EDate;
    string Description = "Default", AccYear = "", cmbUsername, Con, cmpnyCode;
    public bool Loading = false;
    public string SelectedCustomer { get; set; }
    public int? RowIndex { get; set; } = 1003;
    int StudentCount = 0;
    decimal cashSum, ChequeSum, TTSum, cardSum, onlineSum;
    decimal GrandTotal;
    string StartDate, EndDate;
    int UserID, AccountID, BranchID;
    bool AllowOpen = false;
    public Query Query = new Query();
    string GridHeight = "500px";
    string Category = "";
    SfTextBox search;
    public SfGrid<dtAccountsMain> SGrid { get; set; }

    public dtAccountsMain dtAccounts = new dtAccountsMain();
    public IList<dtAccountsMain> gridData { get; set; }
    public IList<dtAccountsMain> UserList { get; set; }
    private IList<dtAccountsMain> CountList { get; set; }
    public List<ExpandoObject> companyDetails = new List<ExpandoObject>();
    DtoLoginModel? info = new DtoLoginModel();


    IEnumerable<string> DropdownData = new List<string>() {
      "Default",
    };
    public string? DecimalFormat { get; set; } = "0.00";

    protected override async Task OnInitializedAsync()
    {
        // SDate = DateTime.Now;
        // EDate = DateTime.Now;
        // // UserID = await sessionStorage.GetItemAsync<int>("UserID");
        // // AccountID = await sessionStorage.GetItemAsync<int>("AccountID");
        // // BranchID = await sessionStorage.GetItemAsync<int>("BranchID");
        // // Con = await sessionStorage.GetItemAsync<string>("Con");
        // // cmpnyCode = await sessionStorage.GetItemAsync<string>("Company");
        // // AccYear = await sessionStorage.GetItemAsync<string>("AcademicYear");
        // var dimension = await jsRuntime.InvokeAsync<WindowDimension>("getWindowDimensions");
        // GridHeight = (dimension.Height - 180).ToString() + "px";
        // Description = "Default";
        // cmbUsername = null;



        // if (UserID == 0)
        // {
        //     NavigationManager.NavigateTo("/");
        // }
        // else if (UserID != 0)
        // {
        //     AllowOpen = true;

        // }


        await GetLoginInfo();
        if (info != null)
        {
            DecimalFormat = _GlobalServ.GlobalCurrencyFormat;
            if (DecimalFormat == null || DecimalFormat == "")
            {

                DecimalFormat = "0.00";
            }
            UserID = info.UserID;
            BranchID = info.BranchID;
            Category = info.Category;
            cmpnyCode = info.CompanyCode;
            SDate = DateTime.Now;
            EDate = DateTime.Now;
            AccYear = await sessionStorage.GetItemAsync<string>("AcademicYear");
            var dimension = await jsRuntime.InvokeAsync<WindowDimension>("getWindowDimensions");
            GridHeight = (dimension.Height - 180).ToString() + "px";
            Description = "Default";
            UserList = (await _generalService.GetUserName()).ToList();

        }
        else
        {

        }
    }



    public async void Search_Click()
    {
        try
        {
            Loading = true;
            string startDate = SDate.Month.ToString("00") + "-" + SDate.Day.ToString("00") + "-" + SDate.Year;
            string endDate = EDate.Month.ToString("00") + "-" + EDate.Day.ToString("00") + "-" + EDate.Year;
            gridData = (await _accountsmain.GetUserwiseCollectionSummary(BranchID, AccYear, startDate.ToString(), endDate.ToString(), "All", "UserWiseCollectionSummary", cmbUsername)).ToList();
            GetDayTotal();
        }
        catch (Exception)
        {
            
            throw;
        }
        finally
        {
        Loading = false;
        await InvokeAsync(StateHasChanged);
        }
    }

    public decimal GetDayTotal()
    {
        cashSum = Convert.ToDecimal(Queryable.Sum(gridData.Select(x => (x.Cash)).AsQueryable()));
        ChequeSum = Convert.ToDecimal(Queryable.Sum(gridData.Select(x => (x.Cheque)).AsQueryable()));
        TTSum = Convert.ToDecimal(Queryable.Sum(gridData.Select(x => (x.TT)).AsQueryable()));
        cardSum = Convert.ToDecimal(Queryable.Sum(gridData.Select(x => (x.Card)).AsQueryable()));
        onlineSum = Convert.ToDecimal(Queryable.Sum(gridData.Select(x => (x.OnlinePayment)).AsQueryable()));
        return GrandTotal = Math.Round((cashSum + ChequeSum + TTSum + cardSum + onlineSum), 2);

    }

    public async Task ExportExcel()
    {
        await this.SGrid.ExportToExcelAsync();
    }

    public async Task ExportPdf()
    {
        await this.SGrid.ExportToPdfAsync();
    }

    public void OnSearch(InputEventArgs Args)
    {
        if (Args.Value != null)
        {
            SGrid.Search(Args.Value);
            this.StateHasChanged();
        }
    }

    public void OnInput(InputEventArgs Args)
    {
        if (Args.Value != null)
        {
            SGrid.Search(Args.Value);
        }
    }



    SfComboBox<string, dtAccountsMain> cmbList;

    public async Task OnComboSearch(Syncfusion.Blazor.DropDowns.FilteringEventArgs args)
    {
        if (args.Text != null && args.Text != "")
        {
        }
        args.PreventDefaultAction = true;
        var pre = new WhereFilter();
        var predicate = new List<WhereFilter>();
        predicate.Add(new WhereFilter() { Condition = "or", Field = "UserName", value = args.Text, Operator = "contains", IgnoreAccent = true, IgnoreCase = true });
        pre = WhereFilter.Or(predicate);
        Query = args.Text == "" ? new Query().Take(25) : new Query().Where(pre).Take(25);
        await this.cmbList.FilterAsync(UserList, Query);
    }

    private ElementReference codeBlock;
    public async Task DownLoadDocument()
    {

        try
        {
            var data = await SGrid.GetFilteredRecordsAsync();
            var dataList = new List<object>();

            if (data is IEnumerable<object> enumerableData)
            {
                foreach (var item in enumerableData)
                {
                    dataList.Add(item);
                }
            }
            else
            {
                dataList.Add(data);
            }
            companyDetails = new List<ExpandoObject>();
            companyDetails = await _companyManager.GetCompanyDetails(BranchID);
            DataSource dt = new DataSource
                {
                    Parameters = new List<JSReportParameter>
                {
                    new JSReportParameter()
                    {
                        Name = "DateFrom",
                        Values = new List<string>(){ SDate.ToString() }
                    },
                    new JSReportParameter()
                    {
                        Name = "DateTo",
                        Values = new List<string>(){ EDate.ToString() }
                    }
                }
                };
            dt.DataSet1 = new List<ExpandoObject>();
            dt.DataSet2 = new List<ExpandoObject>();
            dt.ReportName = "User Collection Summary";
            dt.DataSet1 = JsonConvert.DeserializeObject<List<ExpandoObject>>(JsonConvert.SerializeObject(dataList));
            dt.Company = JsonConvert.DeserializeObject<List<ExpandoObject>>(JsonConvert.SerializeObject(companyDetails));
            if (dt.ReportName != "")
            {
                var Result = await _BoldReport.GetReport(dt);
                var filename = "User-wise Collection Summary_" + SDate.ToString("dd/MM/yyyy") + ".pdf";
                await jsRuntime.InvokeVoidAsync("jsSaveAsFile", filename, Convert.ToBase64String(Result.ToArray()));
            }
        }
        catch (Exception ex)
        {
            
            throw ex;
        }
    }
    private async Task GetLoginInfo()
    {
        try
        {
            var token = await sessionStorage.GetItemAsync<string>("token");
            string param = await http.GetStringAsync("API/Encryption/Decrypt?Text=" + HttpUtility.UrlEncode(token));
            if (!string.IsNullOrEmpty(param))
                info = JsonConvert.DeserializeObject<DtoLoginModel>(param);
        }
        catch (Exception ex)
        {
            this.ToastService.ShowToast(new ToastOption()
                {
                    Title = "Something went wrong...",
                    Content = ex.Message,
                    CssClass = "e-toast-danger",
                    Icon = "e-error toast-icons",
                    Timeout = 2000,
                    X = "Right",
                    Y = "Top",
                    CloseButton = true
                });
            Console.WriteLine(ex);
            await jsRuntime.InvokeVoidAsync("window.history.back");
        }
    }

}

