@page "/OnlineCollection"

@using OrisonDailyReport.Client.Services
@using OrisonDailyReport.Shared.Entities.BoldReport
@using OrisonDailyReport.Shared.Entities.General
@using OrisonDailyReport.Shared.Entities.Login
@using OrisonDailyReport.Shared.Entities.Registers
@using Syncfusion.Blazor.Buttons;
@using Syncfusion.Blazor.Grids;
@using Syncfusion.Blazor.DropDowns;
@using Syncfusion.Blazor.Calendars;
@using Syncfusion.Blazor.Inputs;
@using System.Dynamic;
@using Newtonsoft.Json
@using System.Web
@inject NavigationManager _NavManager
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject OrisonDailyReport.Client.Logics.Contract.Registers.IAccountsMain _accountsmain
@inject NavigationManager NavigationManager
@inject IJSRuntime jsRuntime
@inject OrisonDailyReport.Client.Logics.Contract.BoldReport.IBoldReportManager _BoldReport
@inject OrisonDailyReport.Client.Logics.Contract.General.IUserLoginManager _userLoginManager
@inject OrisonDailyReport.Client.Logics.Contract.General.ICompanyManager _companyManager
@inject ToastService ToastService
@inject HttpClient http
@inject GlobalService _GlobalServ
@using Microsoft.Extensions.Localization
@using OrisonDailyReport.Client.Resources
@inject IStringLocalizer<SfResources> Localizer
<head>
    <link href="css/OrisonSyncfusionStyles.css" rel="stylesheet" />
</head>

<div>

    <div class="box-card-shadow">
        <div class="col-sm-12">
            <SfButton IconCss="Icon excel" CssClass="e-btn4" @onclick="@ExportExcel"></SfButton>
            <SfButton IconCss="Icon pdf" CssClass="e-btn4" @onclick="@ExportPdf"></SfButton>
            <SfComboBox @bind-Value="@Description" TValue="string" TItem="String" DataSource="@DropdownData" Width="180px"></SfComboBox>
            <SfTextBox @ref="search" Input="OnInput" Placeholder=@Localizer["Global Search"] Width="220px" ShowClearButton="true" CssClass="e-btn2"></SfTextBox>
            <SfDatePicker @bind-Value="@SDate" Format="dd/MM/yyyy" title=@Localizer["From Date"] Width="150px" Placeholder=@Localizer["From Date"]></SfDatePicker>
            <SfDatePicker @bind-Value="@EDate" Format="dd/MM/yyyy" title=@Localizer["To Date"] Width="150px" Placeholder=@Localizer["To Date"]></SfDatePicker>
            <SfButton IconCss="Icon search" @onclick="@Search_Click" title=@Localizer["Search"] CssClass="e-btn4"></SfButton>
            <SfButton IconCss="Icon preprint" CssClass="e-btn4" @onclick="@DownLoadDocument"></SfButton>
        </div>

    </div>

    <div>
        <div class="box-card-shadow">


            <SfGrid ID="SGrid" DataSource="@Getdata"
                    GridLines="GridLine.Both"
                    AllowSorting="true"
                    AllowFiltering="true"
                    AllowExcelExport="true"
                    AllowPdfExport="true"
                    AllowResizing="true"
                    RowHeight="24"
                    Width="100%"
                    Height="@GridHeight"
                    AllowPaging="true"
                    @ref="refdata">
                <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel" ShowFilterBarStatus="true"></GridFilterSettings>
                <GridPageSettings PageSize="100"></GridPageSettings>
                <GridColumns>

                    <GridColumn HeaderText=@Localizer["S.No"] Width="60" Context="context1">
                        <Template>
                            @{
                                var val = GetRowCountExp(context1 as dtOnlineCollection);

                                @val.Result
                            }
                        </Template>
                    </GridColumn>
                    <GridColumn Field=@nameof(dtOnlineCollection.VNo) HeaderText=@Localizer["Receipt No"] TextAlign="TextAlign.Left" Width="100" IsPrimaryKey="true"></GridColumn>
                    <GridColumn Field=@nameof(dtOnlineCollection.VDate) HeaderText=@Localizer["Date"] Format="dd/MM/yyyy" TextAlign="TextAlign.Left" Width="100"></GridColumn>
                    <GridColumn Field=@nameof(dtOnlineCollection.Accountcode) HeaderText=@Localizer["Code"] TextAlign="TextAlign.Left" Width="180"></GridColumn>
                    <GridColumn Field=@nameof(dtOnlineCollection.AccountName) HeaderText=@Localizer["Name"] TextAlign="TextAlign.Left" Width="180"></GridColumn>
                    <GridColumn Field=@nameof(dtOnlineCollection.OnlinePayment) HeaderText=@Localizer["Amount"] Format="@DecimalFormat" HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Right" Width="180"></GridColumn>
                    <GridColumn Field=@nameof(dtOnlineCollection.Total) HeaderText=@Localizer["Total"] HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Right" Width="180" Format="@DecimalFormat"></GridColumn>
                </GridColumns>
                @if (Loading)
                {
                    @* <div style="padding-top:700px;"> *@
                    @* <div class="loader"></div> *@
                    <svg width="2500" height="2500" viewBox="126.444 2.281 589 589"><image href="gif/loading-waiting.gif" height="590px" width="770px" /></svg>
                    @* </div> *@
                }
            </SfGrid>



        </div>
    </div>
</div>



@code{
    DateTime SDate = DateTime.Now, EDate = DateTime.Now;
    public SfGrid<dtOnlineCollection> refdata { get; set; }
    private IList<dtOnlineCollection> Getdata { get; set; }
    public List<ExpandoObject> companyDetails = new List<ExpandoObject>();
    int UserID, AccountID, BranchID;
    string AcademicYear;
    string AccYear = "", Description = "Default", Con, cmpnyCode;
    SfTextBox search;
    string GridHeight = "500px";
    string Category = "";
    DtoLoginModel? info = new DtoLoginModel();
    bool Loading = false;
    public string? DecimalFormat { get; set; } = "0.00";

    protected override async Task OnInitializedAsync()
    {
        await GetLoginInfo();
        if (info != null)
        {
            DecimalFormat = _GlobalServ.GlobalCurrencyFormat;
            if (DecimalFormat == null || DecimalFormat == "")
            {

                DecimalFormat = "0.00";
            }
            UserID = info.UserID;
            BranchID = info.BranchID;
            Category = info.Category;
            cmpnyCode = info.CompanyCode;
            SDate = DateTime.Now;
            EDate = DateTime.Now;
            AccYear = await sessionStorage.GetItemAsync<string>("AcademicYear");
            var dimension = await jsRuntime.InvokeAsync<WindowDimension>("getWindowDimensions");
            GridHeight = (dimension.Height - 180).ToString() + "px";
            Description = "Default";
        }
        else
        {

        }

    }

    public async Task<double> GetRowCounter(int? val)
    {
        var index = await refdata.GetRowIndexByPrimaryKeyAsync(val);
        var currentPage = refdata.PageSettings.CurrentPage;
        if (refdata.AllowPaging && currentPage > 1)
        {
            index = (((currentPage - 1) * refdata.PageSettings.PageSize) + index);
        }
        return index + 1;

    }
    public async Task<int> GetRowCountExp(dtOnlineCollection val)
    {
        int RowCounter = Getdata.IndexOf(val);
        return RowCounter + 1;
    }
    public async Task ExportExcel()
    {
        ExcelExportProperties ExcelProperties = new ExcelExportProperties();
        ExcelProperties.FileName = "OnlineCollectionDetails.xlsx";
        await this.refdata.ExportToExcelAsync(ExcelProperties);
    }

    public async Task ExportPdf()
    {
        PdfExportProperties PdfProperties = new PdfExportProperties();
        PdfProperties.FileName = "OnlineCollectionDetails.pdf";
        await this.refdata.ExportToPdfAsync(PdfProperties);
    }
    private ElementReference codeBlock;

    public async Task DownLoadDocument()
    {

        try
        {
            var data = await refdata.GetFilteredRecordsAsync();
            var dataList = new List<object>();

            if (data is IEnumerable<object> enumerableData)
            {
                foreach (var item in enumerableData)
                {
                    dataList.Add(item);
                }
            }
            else
            {
                dataList.Add(data);
            }
            companyDetails = new List<ExpandoObject>();
            companyDetails = await _companyManager.GetCompanyDetails(BranchID);
            DataSource dt = new DataSource();
            dt.DataSet1 = new List<ExpandoObject>();
            dt.DataSet2 = new List<ExpandoObject>();
            dt.ReportName = "Online Collection";
            dt.DataSet1 = JsonConvert.DeserializeObject<List<ExpandoObject>>(JsonConvert.SerializeObject(dataList));
            dt.Company = JsonConvert.DeserializeObject<List<ExpandoObject>>(JsonConvert.SerializeObject(companyDetails));
            if (dt.ReportName != "")
            {
                var Result = await _BoldReport.GetReport(dt);
                var filename = "Online Collection Details_" + SDate.ToString("dd/MM/yyyy") + ".pdf";
                await jsRuntime.InvokeVoidAsync("jsSaveAsFile", filename, Convert.ToBase64String(Result.ToArray()));
            }
        }
        catch (Exception ex)
        {

            throw ex;
        }
    }
    public async void Search_Click()
    {
        try
        {
            Loading = true;
            string startDate = SDate.Month.ToString("00") + "-" + SDate.Day.ToString("00") + "-" + SDate.Year;
            string endDate = EDate.Month.ToString("00") + "-" + EDate.Day.ToString("00") + "-" + EDate.Year;
            Getdata = (await _accountsmain.GetOnlineCollection(AccYear, BranchID, startDate.ToString(), endDate.ToString())).ToList();
        }
        catch (Exception)
        {

            throw;
        }
        finally
        {
            Loading = false;
            await InvokeAsync(StateHasChanged);
        }

    }
    IEnumerable<string> DropdownData = new List<string>() {
      "Default",
    };
    public void OnInput(InputEventArgs Args)
    {
        if (Args.Value != null)
        {
            refdata.Search(Args.Value);
        }
    }
    private async Task GetLoginInfo()
    {
        try
        {
            var token = await sessionStorage.GetItemAsync<string>("token");
            string param = await http.GetStringAsync("API/Encryption/Decrypt?Text=" + HttpUtility.UrlEncode(token));
            if (!string.IsNullOrEmpty(param))
                info = JsonConvert.DeserializeObject<DtoLoginModel>(param);
        }
        catch (Exception ex)
        {
            this.ToastService.ShowToast(new ToastOption()
                {
                    Title = "Something went wrong...",
                    Content = ex.Message,
                    CssClass = "e-toast-danger",
                    Icon = "e-error toast-icons",
                    Timeout = 2000,
                    X = "Right",
                    Y = "Top",
                    CloseButton = true
                });
            Console.WriteLine(ex);
            await jsRuntime.InvokeVoidAsync("window.history.back");
        }
    }

}