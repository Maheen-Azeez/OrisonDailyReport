@page "/ToastComponent"

@using OrisonDailyReport.Client.Services
@using Syncfusion.Blazor.Notifications
@using OrisonDailyReport.Shared.Entities.General

@inject ToastService ToastService
<head>
    <link href="css/Toast.css" rel="stylesheet" />
</head>

<SfToast @ref="Toast" ShowCloseButton="@Options.CloseButton" CssClass="@Options.CssClass" Icon="@Options.Icon" Timeout="@Options.Timeout">
    <ToastTemplates>
        <Title>
            @Options.Title
        </Title>
        <Content>
            @Options.Content
        </Content>
    </ToastTemplates>
    <ToastAnimationSettings>
        <ToastShowAnimationSettings Effect="@ShowAnimation"></ToastShowAnimationSettings>
        <ToastHideAnimationSettings Effect="@HideAnimation"></ToastHideAnimationSettings>
    </ToastAnimationSettings>
    <ToastPosition X="@Options.X" Y="@Options.Y"></ToastPosition>
</SfToast>

@code {

    SfToast? Toast;
    private ToastEffect ShowAnimation = ToastEffect.ZoomIn;
    private ToastEffect HideAnimation = ToastEffect.ZoomOut;
    private bool IsToastVisible { get; set; } = false;

    private ToastOption Options = new ToastOption();

    protected override void OnInitialized()
    {
        ToastService.ShowToastTrigger += (ToastOption options) =>
        {
            InvokeAsync(() =>
            {
                this.Options.Title = options.Title;
                this.Options.Content = options.Content;
                this.Options.CloseButton = options.CloseButton;
                this.Options.CssClass = options.CssClass;
                this.Options.Icon = options.Icon;
                this.Options.Timeout = options.Timeout;
                this.Options.X = options.X;
                this.Options.Y = options.Y;
                this.IsToastVisible = true;
                this.StateHasChanged();
                this.Toast?.ShowAsync();
            });
        };
        base.OnInitialized();
    }
}